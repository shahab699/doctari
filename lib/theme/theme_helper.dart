import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray300,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.red700,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 16.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w300,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 13.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray700,
          fontSize: 12.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w300,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 32.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.blueGray90005,
          fontSize: 28.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 25.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 10.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 20.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 16.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 14.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0066FF),
    primaryContainer: Color(0XFF1A1A1A),
    secondaryContainer: Color(0XFF3C7384),

    // Error colors
    errorContainer: Color(0XFF014737),
    onError: Color(0XFF386F25),
    onErrorContainer: Color(0X19FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF0B0B0A),
    onPrimaryContainer: Color(0XFF9CA3AF),
    onSecondaryContainer: Color(0XFF0A0C13),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFCFE1EC);
  Color get blueGray10001 => Color(0XFFC4CDD5);
  Color get blueGray10033 => Color(0X33D9D9D9);
  Color get blueGray300 => Color(0XFF8EA0AB);
  Color get blueGray30087 => Color(0X87919EAB);
  Color get blueGray30099 => Color(0X998E9FAB);
  Color get blueGray400 => Color(0XFF8D8D8D);
  Color get blueGray40001 => Color(0XFF858EA9);
  Color get blueGray500 => Color(0XFF677294);
  Color get blueGray700 => Color(0XFF4B5563);
  Color get blueGray800 => Color(0XFF374151);
  Color get blueGray900 => Color(0XFF1F2A37);
  Color get blueGray90001 => Color(0XFF353535);
  Color get blueGray90002 => Color(0XFF1C2A3A);
  Color get blueGray90003 => Color(0XFF212B36);
  Color get blueGray90004 => Color(0XFF222357);
  Color get blueGray90005 => Color(0XFF333333);

  // DeepOrange
  Color get deepOrange50 => Color(0XFFFDE8E8);

  // DeepPurple
  Color get deepPurple200 => Color(0XFFC49FE2);

  // Gray
  Color get gray100 => Color(0XFFF3F4F6);
  Color get gray10001 => Color(0XFFF3F6F8);
  Color get gray10002 => Color(0XFFF3F7F9);
  Color get gray10003 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFE5E7EB);
  Color get gray20001 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFDFE3E8);
  Color get gray30001 => Color(0XFFDBDBDB);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray50 => Color(0XFFF9F7F7);
  Color get gray500 => Color(0XFFABABAB);
  Color get gray50001 => Color(0XFFABACAC);
  Color get gray50002 => Color(0XFF989898);
  Color get gray5001 => Color(0XFFF9F9F9);
  Color get gray5002 => Color(0XFFF9FAFB);
  Color get gray600 => Color(0XFF6B7280);

  // Green
  Color get green50 => Color(0XFFDEF7E4);
  Color get green500 => Color(0XFF4FAD50);
  Color get greenA700 => Color(0XFF0FB616);

  // Indigo
  Color get indigo700 => Color(0XFF254AA5);
  Color get indigo900 => Color(0XFF01326F);
  Color get indigo90001 => Color(0XFF203772);
  Color get indigo90002 => Color(0XFF000F5F);

  // LightBlue
  Color get lightBlueA200 => Color(0XFF33CEFF);

  // LightGreen
  Color get lightGreen100 => Color(0XFFD6FFD8);

  // Orange
  Color get orange300 => Color(0XFFFEB052);

  // Pink
  Color get pink900 => Color(0XFF771D1D);

  // Red
  Color get red700 => Color(0XFFE31E24);
  Color get redA700 => Color(0XFFFF0000);

  // Teal
  Color get teal300 => Color(0XFF478EA8);
  Color get teal400 => Color(0XFF13A7AA);

  // Yellow
  Color get yellow800 => Color(0XFFF79E1B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
